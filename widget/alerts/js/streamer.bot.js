/***************************************************
 *              DO NOT EDIT THIS FILE              *
 *        THIS COULD BREAK YOUR WIDGET OR          *
 * BE A PROBLEM IF YOU WANT TO USE A NEWER VERSION *
 ***************************************************/

var ws;

async function connectws() {
    ws = new WebSocket(settings.websocketURL);
    if ("WebSocket" in window) {
        await getAlerts()
            .then((data) => {
                bindEvents(data);
            })
            .catch((error) => {
                console.error("An error occurred:", error);
            });
    }
}

/**
 * Subscribing to Streamer.Bot Events
 */
function bindEvents(events) {
    ws.onopen = () => {
        console.info("Websocket connected")
        console.debug("Subscribing to following events:", events);
        ws.send(
            JSON.stringify({
                request: "Subscribe",
                id: "streamer.bot_alerts",
                events,
            })
        );
    };

    ws.onmessage = async (event) => {
        var wsdata = JSON.parse(event.data);

        if (!wsdata.event) {
            return;
        }

        console.debug(`Platform: ${wsdata.event.source} | ${wsdata.event.type}`)
        console.debug(wsdata);

        // Todo: Add a queueing system so the alerts are not cut off
        addAlertToQueue(pushAlert(wsdata.event.source.toLowerCase(), wsdata.event.type.toLowerCase(), wsdata.data));


    };

    ws.onclose = function (event) {
        console.info("Lost connection... reconection in 10s");
        setTimeout(connectws, 10000);
    };

}

/**
 * Converts alert settings in
 * event array to subscribe
 * @returns array[array[string]]
 */
function getAlerts() {
    var collection = Object();
    return new Promise((resolve) => {
        for (const [platform, alerts] of Object.entries(subscribeToEvents)) {
            collection[platform] = Array();
            for (const [alert, status] of Object.entries(alerts)) {
                if (status) {
                    collection[platform].push(alert);
                }
            }
        }
        resolve(collection);
    });
}
